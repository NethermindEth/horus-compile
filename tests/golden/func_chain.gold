{
  "checks": {
    "asserts": {},
    "invariants": {},
    "post_conds": {
      "__main__.main": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun memory (Int) Int)\n(declare-fun prime () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (= 26 (memory (mod (- ap 1) prime)))))\n  (and true a!1)))\n"
      },
      "__main__.square_succ": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun prime () Int)\n(declare-fun memory (Int) Int)\n(declare-fun fp () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (* (memory (mod (- fp 3) prime)) (memory (mod (- fp 3) prime)))))\n(let ((a!2 (= (memory (mod (- ap 1) prime)) (mod (+ (mod a!1 prime) 1) prime))))\n  (and true a!2))))\n"
      },
      "__main__.succ": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun prime () Int)\n(declare-fun memory (Int) Int)\n(declare-fun fp () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (+ (memory (mod (- fp 3) prime)) 1)))\n(let ((a!2 (= (memory (mod (- ap 1) prime)) (mod a!1 prime))))\n  (and true a!2))))\n"
      }
    },
    "pre_conds": {},
    "requires": {}
  },
  "logical_variables": {}
}