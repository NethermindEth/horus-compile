{
  "invariants": {
    "__main__.main.loop": {
      "sexpr": [
        "(let ((a!1 (= (+ (memory (+ ap (- 2))) (memory (+ ap (- 1))))",
        "              (+ (memory (+ fp 2)) 1)))",
        "      (a!2 (* (memory (+ ap (- 2)))",
        "              (+ (memory (+ ap (- 2))) (- 1))",
        "              (- 1809251394333065606848661391547535052811553607665798349986546028067936010240))))",
        "  (and a!1 (= (memory (+ ap (- 3))) a!2)))"
      ],
      "source": [
        "[ap - 2] + [ap - 1] == [fp + 2] + 1 and [ap - 3] == ([ap - 2] * ([ap - 2] - 1)) / 2"
      ]
    }
  },
  "specifications": {
    "__main__.main": {
      "decls": {},
      "logical_variables": {},
      "post": {
        "sexpr": [
          "(let ((a!1 (* (+ (memory (+ fp 2)) 1)",
          "              (memory (+ fp 2))",
          "              (- 1809251394333065606848661391547535052811553607665798349986546028067936010240))))",
          "  (= (memory (+ ap (- 3))) a!1))"
        ],
        "source": [
          "[ap - 3] == (([fp + 2] + 1) * [fp + 2]) / 2"
        ]
      },
      "pre": {
        "sexpr": [
          "(let ((a!1 (= (+ (memory (+ ap (- 2))) (memory (+ ap (- 1))))",
          "              (+ (memory (+ fp 2)) 1)))",
          "      (a!2 (* (memory (+ ap (- 2)))",
          "              (+ (memory (+ ap (- 2))) (- 1))",
          "              (- 1809251394333065606848661391547535052811553607665798349986546028067936010240))))",
          "  (and a!1 (= (memory (+ ap (- 3))) a!2)))"
        ],
        "source": [
          "[ap - 2] + [ap - 1] == [fp + 2] + 1 and [ap - 3] == ([ap - 2] * ([ap - 2] - 1)) / 2"
        ]
      },
      "storage_update": {}
    }
  },
  "storage_vars": {}
}