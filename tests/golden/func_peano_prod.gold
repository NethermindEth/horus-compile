{
  "checks": {
    "asserts": {},
    "invariants": {
      "__main__.prod.loop": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun prime () Int)\n(declare-fun memory (Int) Int)\n(declare-fun fp () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (* (memory fp) (memory (mod (- ap 2) prime))))\n      (a!3 (* (memory fp) (memory (mod (+ fp 1) prime)))))\n(let ((a!2 (+ (memory (mod (- ap 1) prime)) (mod a!1 prime))))\n  (and true (= (mod a!2 prime) (mod a!3 prime))))))\n"
      }
    },
    "post_conds": {
      "__main__.main": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun memory (Int) Int)\n(declare-fun prime () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (= 32 (memory (mod (- ap 1) prime)))))\n  (and true a!1)))\n"
      },
      "__main__.prod": {
        "axiom": "(assert (and true true))\n",
        "bool_ref": "(declare-fun prime () Int)\n(declare-fun memory (Int) Int)\n(declare-fun fp () Int)\n(declare-fun ap () Int)\n(assert (let ((a!1 (* (memory (mod (- fp 3) prime)) (memory (mod (- fp 4) prime)))))\n(let ((a!2 (= (memory (mod (- ap 1) prime)) (mod a!1 prime))))\n  (and true a!2))))\n"
      }
    },
    "pre_conds": {},
    "requires": {}
  },
  "logical_variables": {}
}